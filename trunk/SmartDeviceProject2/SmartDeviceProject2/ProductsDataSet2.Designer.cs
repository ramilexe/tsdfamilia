//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.4927.
// 
namespace TSDServer
{
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProductsDataSet")]
    public partial class ProductsDataSet : global::System.Data.DataSet {
        
        private ProductsTblDataTable tableProductsTbl;
        
        private DocsTblDataTable tableDocsTbl;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductsTblDataTable ProductsTbl {
            get {
                return this.tableProductsTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocsTblDataTable DocsTbl {
            get {
                return this.tableDocsTbl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProductsDataSet cln = ((ProductsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ProductsTbl"] != null)) {
                    base.Tables.Add(new ProductsTblDataTable(ds.Tables["ProductsTbl"]));
                }
                if ((ds.Tables["DocsTbl"] != null)) {
                    base.Tables.Add(new DocsTblDataTable(ds.Tables["DocsTbl"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProductsTbl = ((ProductsTblDataTable)(base.Tables["ProductsTbl"]));
            if ((initTable == true)) {
                if ((this.tableProductsTbl != null)) {
                    this.tableProductsTbl.InitVars();
                }
            }
            this.tableDocsTbl = ((DocsTblDataTable)(base.Tables["DocsTbl"]));
            if ((initTable == true)) {
                if ((this.tableDocsTbl != null)) {
                    this.tableDocsTbl.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProductsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProductsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProductsTbl = new ProductsTblDataTable();
            base.Tables.Add(this.tableProductsTbl);
            this.tableDocsTbl = new DocsTblDataTable();
            base.Tables.Add(this.tableDocsTbl);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductsTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDocsTbl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProductsDataSet ds = new ProductsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProductsTblRowChangeEventHandler(object sender, ProductsTblRowChangeEvent e);
        
        public delegate void DocsTblRowChangeEventHandler(object sender, DocsTblRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductsTblDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBarcode;
            
            private global::System.Data.DataColumn columnProductName;
            
            private global::System.Data.DataColumn columnArticle;
            
            private global::System.Data.DataColumn columnCountry;
            
            private global::System.Data.DataColumn columnNavCode;
            
            private global::System.Data.DataColumn columnStructure;
            
            private global::System.Data.DataColumn columnOldPrice;
            
            private global::System.Data.DataColumn columnNewPrice;
            
            private global::System.Data.DataColumn columnMessage;
            
            private global::System.Data.DataColumn columnMessage2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblDataTable() {
                this.TableName = "ProductsTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductsTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarcodeColumn {
                get {
                    return this.columnBarcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleColumn {
                get {
                    return this.columnArticle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NavCodeColumn {
                get {
                    return this.columnNavCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StructureColumn {
                get {
                    return this.columnStructure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldPriceColumn {
                get {
                    return this.columnOldPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewPriceColumn {
                get {
                    return this.columnNewPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Message2Column {
                get {
                    return this.columnMessage2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow this[int index] {
                get {
                    return ((ProductsTblRow)(this.Rows[index]));
                }
            }
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowChanging;
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowChanged;
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowDeleting;
            
            public event ProductsTblRowChangeEventHandler ProductsTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductsTblRow(ProductsTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow AddProductsTblRow(long Barcode, string ProductName, string Article, string Country, string NavCode, string Structure, float OldPrice, float NewPrice, string Message, string Message2) {
                ProductsTblRow rowProductsTblRow = ((ProductsTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Barcode,
                        ProductName,
                        Article,
                        Country,
                        NavCode,
                        Structure,
                        OldPrice,
                        NewPrice,
                        Message,
                        Message2};
                rowProductsTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProductsTblRow);
                return rowProductsTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow FindByBarcode(long Barcode) {
                return ((ProductsTblRow)(this.Rows.Find(new object[] {
                            Barcode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProductsTblDataTable cln = ((ProductsTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProductsTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBarcode = base.Columns["Barcode"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnArticle = base.Columns["Article"];
                this.columnCountry = base.Columns["Country"];
                this.columnNavCode = base.Columns["NavCode"];
                this.columnStructure = base.Columns["Structure"];
                this.columnOldPrice = base.Columns["OldPrice"];
                this.columnNewPrice = base.Columns["NewPrice"];
                this.columnMessage = base.Columns["Message"];
                this.columnMessage2 = base.Columns["Message2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBarcode = new global::System.Data.DataColumn("Barcode", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarcode);
                this.columnProductName = new global::System.Data.DataColumn("ProductName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnArticle = new global::System.Data.DataColumn("Article", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticle);
                this.columnCountry = new global::System.Data.DataColumn("Country", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnNavCode = new global::System.Data.DataColumn("NavCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNavCode);
                this.columnStructure = new global::System.Data.DataColumn("Structure", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStructure);
                this.columnOldPrice = new global::System.Data.DataColumn("OldPrice", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldPrice);
                this.columnNewPrice = new global::System.Data.DataColumn("NewPrice", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewPrice);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
                this.columnMessage2 = new global::System.Data.DataColumn("Message2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage2);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBarcode}, true));
                this.columnBarcode.AllowDBNull = false;
                this.columnBarcode.Unique = true;
                this.columnProductName.MaxLength = 30;
                this.columnArticle.MaxLength = 30;
                this.columnCountry.MaxLength = 25;
                this.columnNavCode.MaxLength = 13;
                this.columnStructure.MaxLength = 30;
                this.columnMessage.MaxLength = 20;
                this.columnMessage2.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow NewProductsTblRow() {
                return ((ProductsTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProductsTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProductsTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductsTblRowChanged != null)) {
                    this.ProductsTblRowChanged(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductsTblRowChanging != null)) {
                    this.ProductsTblRowChanging(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductsTblRowDeleted != null)) {
                    this.ProductsTblRowDeleted(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductsTblRowDeleting != null)) {
                    this.ProductsTblRowDeleting(this, new ProductsTblRowChangeEvent(((ProductsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductsTblRow(ProductsTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProductsDataSet ds = new ProductsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductsTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DocsTblDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNavCode;
            
            private global::System.Data.DataColumn columnDocId;
            
            private global::System.Data.DataColumn columnDocType;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnLabelCode;
            
            private global::System.Data.DataColumn columnMusicCode;
            
            private global::System.Data.DataColumn columnVibroCode;
            
            private global::System.Data.DataColumn columnText1;
            
            private global::System.Data.DataColumn columnText2;
            
            private global::System.Data.DataColumn columnText3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocsTblDataTable() {
                this.TableName = "DocsTbl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocsTblDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NavCodeColumn {
                get {
                    return this.columnNavCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocIdColumn {
                get {
                    return this.columnDocId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocTypeColumn {
                get {
                    return this.columnDocType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelCodeColumn {
                get {
                    return this.columnLabelCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MusicCodeColumn {
                get {
                    return this.columnMusicCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VibroCodeColumn {
                get {
                    return this.columnVibroCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text1Column {
                get {
                    return this.columnText1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text2Column {
                get {
                    return this.columnText2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text3Column {
                get {
                    return this.columnText3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocsTblRow this[int index] {
                get {
                    return ((DocsTblRow)(this.Rows[index]));
                }
            }
            
            public event DocsTblRowChangeEventHandler DocsTblRowChanging;
            
            public event DocsTblRowChangeEventHandler DocsTblRowChanged;
            
            public event DocsTblRowChangeEventHandler DocsTblRowDeleting;
            
            public event DocsTblRowChangeEventHandler DocsTblRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDocsTblRow(DocsTblRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocsTblRow AddDocsTblRow(string NavCode, string DocId, byte DocType, byte Priority, int Quantity, System.DateTime DocumentDate, byte LabelCode, byte MusicCode, byte VibroCode, string Text1, string Text2, string Text3) {
                DocsTblRow rowDocsTblRow = ((DocsTblRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NavCode,
                        DocId,
                        DocType,
                        Priority,
                        Quantity,
                        DocumentDate,
                        LabelCode,
                        MusicCode,
                        VibroCode,
                        Text1,
                        Text2,
                        Text3};
                rowDocsTblRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDocsTblRow);
                return rowDocsTblRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocsTblRow FindByNavCodeDocIdDocType(string NavCode, string DocId, byte DocType) {
                return ((DocsTblRow)(this.Rows.Find(new object[] {
                            NavCode,
                            DocId,
                            DocType})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DocsTblDataTable cln = ((DocsTblDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DocsTblDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNavCode = base.Columns["NavCode"];
                this.columnDocId = base.Columns["DocId"];
                this.columnDocType = base.Columns["DocType"];
                this.columnPriority = base.Columns["Priority"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnLabelCode = base.Columns["LabelCode"];
                this.columnMusicCode = base.Columns["MusicCode"];
                this.columnVibroCode = base.Columns["VibroCode"];
                this.columnText1 = base.Columns["Text1"];
                this.columnText2 = base.Columns["Text2"];
                this.columnText3 = base.Columns["Text3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNavCode = new global::System.Data.DataColumn("NavCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNavCode);
                this.columnDocId = new global::System.Data.DataColumn("DocId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocId);
                this.columnDocType = new global::System.Data.DataColumn("DocType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocType);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnLabelCode = new global::System.Data.DataColumn("LabelCode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabelCode);
                this.columnMusicCode = new global::System.Data.DataColumn("MusicCode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMusicCode);
                this.columnVibroCode = new global::System.Data.DataColumn("VibroCode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVibroCode);
                this.columnText1 = new global::System.Data.DataColumn("Text1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText1);
                this.columnText2 = new global::System.Data.DataColumn("Text2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText2);
                this.columnText3 = new global::System.Data.DataColumn("Text3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText3);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNavCode,
                                this.columnDocId,
                                this.columnDocType}, true));
                this.columnNavCode.AllowDBNull = false;
                this.columnNavCode.MaxLength = 13;
                this.columnDocId.AllowDBNull = false;
                this.columnDocId.MaxLength = 20;
                this.columnDocType.AllowDBNull = false;
                this.columnText1.MaxLength = 20;
                this.columnText2.MaxLength = 20;
                this.columnText3.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocsTblRow NewDocsTblRow() {
                return ((DocsTblRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DocsTblRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DocsTblRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DocsTblRowChanged != null)) {
                    this.DocsTblRowChanged(this, new DocsTblRowChangeEvent(((DocsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DocsTblRowChanging != null)) {
                    this.DocsTblRowChanging(this, new DocsTblRowChangeEvent(((DocsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DocsTblRowDeleted != null)) {
                    this.DocsTblRowDeleted(this, new DocsTblRowChangeEvent(((DocsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DocsTblRowDeleting != null)) {
                    this.DocsTblRowDeleting(this, new DocsTblRowChangeEvent(((DocsTblRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDocsTblRow(DocsTblRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProductsDataSet ds = new ProductsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DocsTblDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ProductsTblRow : global::System.Data.DataRow {
            
            private ProductsTblDataTable tableProductsTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductsTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductsTbl = ((ProductsTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Barcode {
                get {
                    return ((long)(this[this.tableProductsTbl.BarcodeColumn]));
                }
                set {
                    this[this.tableProductsTbl.BarcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    if (this.IsProductNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProductsTbl.ProductNameColumn]));
                    }
                }
                set {
                    this[this.tableProductsTbl.ProductNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Article {
                get {
                    if (this.IsArticleNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProductsTbl.ArticleColumn]));
                    }
                }
                set {
                    this[this.tableProductsTbl.ArticleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Country {
                get {
                    if (this.IsCountryNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProductsTbl.CountryColumn]));
                    }
                }
                set {
                    this[this.tableProductsTbl.CountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NavCode {
                get {
                    if (this.IsNavCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProductsTbl.NavCodeColumn]));
                    }
                }
                set {
                    this[this.tableProductsTbl.NavCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Structure {
                get {
                    if (this.IsStructureNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProductsTbl.StructureColumn]));
                    }
                }
                set {
                    this[this.tableProductsTbl.StructureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float OldPrice {
                get {
                    try {
                        return ((float)(this[this.tableProductsTbl.OldPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OldPrice\' in table \'ProductsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductsTbl.OldPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float NewPrice {
                get {
                    try {
                        return ((float)(this[this.tableProductsTbl.NewPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewPrice\' in table \'ProductsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductsTbl.NewPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    if (this.IsMessageNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProductsTbl.MessageColumn]));
                    }
                }
                set {
                    this[this.tableProductsTbl.MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message2 {
                get {
                    if (this.IsMessage2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableProductsTbl.Message2Column]));
                    }
                }
                set {
                    this[this.tableProductsTbl.Message2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableProductsTbl.ProductNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableProductsTbl.ProductNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArticleNull() {
                return this.IsNull(this.tableProductsTbl.ArticleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArticleNull() {
                this[this.tableProductsTbl.ArticleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNull() {
                return this.IsNull(this.tableProductsTbl.CountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNull() {
                this[this.tableProductsTbl.CountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNavCodeNull() {
                return this.IsNull(this.tableProductsTbl.NavCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNavCodeNull() {
                this[this.tableProductsTbl.NavCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStructureNull() {
                return this.IsNull(this.tableProductsTbl.StructureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStructureNull() {
                this[this.tableProductsTbl.StructureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldPriceNull() {
                return this.IsNull(this.tableProductsTbl.OldPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldPriceNull() {
                this[this.tableProductsTbl.OldPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewPriceNull() {
                return this.IsNull(this.tableProductsTbl.NewPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewPriceNull() {
                this[this.tableProductsTbl.NewPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageNull() {
                return this.IsNull(this.tableProductsTbl.MessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageNull() {
                this[this.tableProductsTbl.MessageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessage2Null() {
                return this.IsNull(this.tableProductsTbl.Message2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessage2Null() {
                this[this.tableProductsTbl.Message2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DocsTblRow : global::System.Data.DataRow {
            
            private DocsTblDataTable tableDocsTbl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocsTblRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDocsTbl = ((DocsTblDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NavCode {
                get {
                    return ((string)(this[this.tableDocsTbl.NavCodeColumn]));
                }
                set {
                    this[this.tableDocsTbl.NavCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocId {
                get {
                    return ((string)(this[this.tableDocsTbl.DocIdColumn]));
                }
                set {
                    this[this.tableDocsTbl.DocIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DocType {
                get {
                    return ((byte)(this[this.tableDocsTbl.DocTypeColumn]));
                }
                set {
                    this[this.tableDocsTbl.DocTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Priority {
                get {
                    try {
                        return ((byte)(this[this.tableDocsTbl.PriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Priority\' in table \'DocsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocsTbl.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableDocsTbl.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'DocsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocsTbl.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocumentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDocsTbl.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'DocsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocsTbl.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte LabelCode {
                get {
                    try {
                        return ((byte)(this[this.tableDocsTbl.LabelCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LabelCode\' in table \'DocsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocsTbl.LabelCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MusicCode {
                get {
                    try {
                        return ((byte)(this[this.tableDocsTbl.MusicCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MusicCode\' in table \'DocsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocsTbl.MusicCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte VibroCode {
                get {
                    try {
                        return ((byte)(this[this.tableDocsTbl.VibroCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VibroCode\' in table \'DocsTbl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocsTbl.VibroCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text1 {
                get {
                    if (this.IsText1Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDocsTbl.Text1Column]));
                    }
                }
                set {
                    this[this.tableDocsTbl.Text1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text2 {
                get {
                    if (this.IsText2Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDocsTbl.Text2Column]));
                    }
                }
                set {
                    this[this.tableDocsTbl.Text2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text3 {
                get {
                    if (this.IsText3Null()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableDocsTbl.Text3Column]));
                    }
                }
                set {
                    this[this.tableDocsTbl.Text3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableDocsTbl.PriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableDocsTbl.PriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableDocsTbl.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableDocsTbl.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tableDocsTbl.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tableDocsTbl.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelCodeNull() {
                return this.IsNull(this.tableDocsTbl.LabelCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelCodeNull() {
                this[this.tableDocsTbl.LabelCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMusicCodeNull() {
                return this.IsNull(this.tableDocsTbl.MusicCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMusicCodeNull() {
                this[this.tableDocsTbl.MusicCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVibroCodeNull() {
                return this.IsNull(this.tableDocsTbl.VibroCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVibroCodeNull() {
                this[this.tableDocsTbl.VibroCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText1Null() {
                return this.IsNull(this.tableDocsTbl.Text1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText1Null() {
                this[this.tableDocsTbl.Text1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText2Null() {
                return this.IsNull(this.tableDocsTbl.Text2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText2Null() {
                this[this.tableDocsTbl.Text2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText3Null() {
                return this.IsNull(this.tableDocsTbl.Text3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText3Null() {
                this[this.tableDocsTbl.Text3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ProductsTblRowChangeEvent : global::System.EventArgs {
            
            private ProductsTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRowChangeEvent(ProductsTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductsTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class DocsTblRowChangeEvent : global::System.EventArgs {
            
            private DocsTblRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocsTblRowChangeEvent(DocsTblRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocsTblRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ProductsDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
