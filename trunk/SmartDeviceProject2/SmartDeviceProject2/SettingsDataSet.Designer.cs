//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3053.
// 
namespace Familia.TSDClient {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SettingsDataSet")]
    public partial class SettingsDataSet : global::System.Data.DataSet {
        
        private UntypedSettingsDataTable tableUntypedSettings;
        
        private TypedSettingsDataTable tableTypedSettings;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SettingsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UntypedSettingsDataTable UntypedSettings {
            get {
                return this.tableUntypedSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TypedSettingsDataTable TypedSettings {
            get {
                return this.tableTypedSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SettingsDataSet cln = ((SettingsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UntypedSettings"] != null)) {
                    base.Tables.Add(new UntypedSettingsDataTable(ds.Tables["UntypedSettings"]));
                }
                if ((ds.Tables["TypedSettings"] != null)) {
                    base.Tables.Add(new TypedSettingsDataTable(ds.Tables["TypedSettings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUntypedSettings = ((UntypedSettingsDataTable)(base.Tables["UntypedSettings"]));
            if ((initTable == true)) {
                if ((this.tableUntypedSettings != null)) {
                    this.tableUntypedSettings.InitVars();
                }
            }
            this.tableTypedSettings = ((TypedSettingsDataTable)(base.Tables["TypedSettings"]));
            if ((initTable == true)) {
                if ((this.tableTypedSettings != null)) {
                    this.tableTypedSettings.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SettingsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SettingsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUntypedSettings = new UntypedSettingsDataTable();
            base.Tables.Add(this.tableUntypedSettings);
            this.tableTypedSettings = new TypedSettingsDataTable();
            base.Tables.Add(this.tableTypedSettings);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUntypedSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTypedSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SettingsDataSet ds = new SettingsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UntypedSettingsRowChangeEventHandler(object sender, UntypedSettingsRowChangeEvent e);
        
        public delegate void TypedSettingsRowChangeEventHandler(object sender, TypedSettingsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UntypedSettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UntypedSettingsDataTable() {
                this.TableName = "UntypedSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UntypedSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UntypedSettingsRow this[int index] {
                get {
                    return ((UntypedSettingsRow)(this.Rows[index]));
                }
            }
            
            public event UntypedSettingsRowChangeEventHandler UntypedSettingsRowChanging;
            
            public event UntypedSettingsRowChangeEventHandler UntypedSettingsRowChanged;
            
            public event UntypedSettingsRowChangeEventHandler UntypedSettingsRowDeleting;
            
            public event UntypedSettingsRowChangeEventHandler UntypedSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUntypedSettingsRow(UntypedSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UntypedSettingsRow AddUntypedSettingsRow(string Name, string Value) {
                UntypedSettingsRow rowUntypedSettingsRow = ((UntypedSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Value};
                rowUntypedSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUntypedSettingsRow);
                return rowUntypedSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UntypedSettingsRow FindByName(string Name) {
                return ((UntypedSettingsRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UntypedSettingsDataTable cln = ((UntypedSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UntypedSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UntypedSettingsRow NewUntypedSettingsRow() {
                return ((UntypedSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UntypedSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UntypedSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UntypedSettingsRowChanged != null)) {
                    this.UntypedSettingsRowChanged(this, new UntypedSettingsRowChangeEvent(((UntypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UntypedSettingsRowChanging != null)) {
                    this.UntypedSettingsRowChanging(this, new UntypedSettingsRowChangeEvent(((UntypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UntypedSettingsRowDeleted != null)) {
                    this.UntypedSettingsRowDeleted(this, new UntypedSettingsRowChangeEvent(((UntypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UntypedSettingsRowDeleting != null)) {
                    this.UntypedSettingsRowDeleting(this, new UntypedSettingsRowChangeEvent(((UntypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUntypedSettingsRow(UntypedSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SettingsDataSet ds = new SettingsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UntypedSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TypedSettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnStorageMemorySize;
            
            private global::System.Data.DataColumn columnVibarationOn;
            
            private global::System.Data.DataColumn columnScanSoundNotifyOn;
            
            private global::System.Data.DataColumn columnDatabaseFileName;
            
            private global::System.Data.DataColumn columnDatabaseStoragePath;
            
            private global::System.Data.DataColumn columnBTPrinterAddress;
            
            private global::System.Data.DataColumn columnBTComPort;
            
            private global::System.Data.DataColumn columnBaseDate;
            
            private global::System.Data.DataColumn columnProductsConnectionString;
            
            private static System.DateTime columnBaseDate_defaultValue = global::System.DateTime.Parse("01/01/2010 00:00:00");
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TypedSettingsDataTable() {
                this.TableName = "TypedSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TypedSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StorageMemorySizeColumn {
                get {
                    return this.columnStorageMemorySize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VibarationOnColumn {
                get {
                    return this.columnVibarationOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanSoundNotifyOnColumn {
                get {
                    return this.columnScanSoundNotifyOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatabaseFileNameColumn {
                get {
                    return this.columnDatabaseFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatabaseStoragePathColumn {
                get {
                    return this.columnDatabaseStoragePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BTPrinterAddressColumn {
                get {
                    return this.columnBTPrinterAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BTComPortColumn {
                get {
                    return this.columnBTComPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseDateColumn {
                get {
                    return this.columnBaseDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductsConnectionStringColumn {
                get {
                    return this.columnProductsConnectionString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TypedSettingsRow this[int index] {
                get {
                    return ((TypedSettingsRow)(this.Rows[index]));
                }
            }
            
            public event TypedSettingsRowChangeEventHandler TypedSettingsRowChanging;
            
            public event TypedSettingsRowChangeEventHandler TypedSettingsRowChanged;
            
            public event TypedSettingsRowChangeEventHandler TypedSettingsRowDeleting;
            
            public event TypedSettingsRowChangeEventHandler TypedSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTypedSettingsRow(TypedSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TypedSettingsRow AddTypedSettingsRow(int StorageMemorySize, bool VibarationOn, bool ScanSoundNotifyOn, string DatabaseFileName, string DatabaseStoragePath, string BTPrinterAddress, int BTComPort, System.DateTime BaseDate, string ProductsConnectionString) {
                TypedSettingsRow rowTypedSettingsRow = ((TypedSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StorageMemorySize,
                        VibarationOn,
                        ScanSoundNotifyOn,
                        DatabaseFileName,
                        DatabaseStoragePath,
                        BTPrinterAddress,
                        BTComPort,
                        BaseDate,
                        ProductsConnectionString};
                rowTypedSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTypedSettingsRow);
                return rowTypedSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TypedSettingsDataTable cln = ((TypedSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TypedSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStorageMemorySize = base.Columns["StorageMemorySize"];
                this.columnVibarationOn = base.Columns["VibarationOn"];
                this.columnScanSoundNotifyOn = base.Columns["ScanSoundNotifyOn"];
                this.columnDatabaseFileName = base.Columns["DatabaseFileName"];
                this.columnDatabaseStoragePath = base.Columns["DatabaseStoragePath"];
                this.columnBTPrinterAddress = base.Columns["BTPrinterAddress"];
                this.columnBTComPort = base.Columns["BTComPort"];
                this.columnBaseDate = base.Columns["BaseDate"];
                this.columnProductsConnectionString = base.Columns["ProductsConnectionString"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStorageMemorySize = new global::System.Data.DataColumn("StorageMemorySize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageMemorySize);
                this.columnVibarationOn = new global::System.Data.DataColumn("VibarationOn", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVibarationOn);
                this.columnScanSoundNotifyOn = new global::System.Data.DataColumn("ScanSoundNotifyOn", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanSoundNotifyOn);
                this.columnDatabaseFileName = new global::System.Data.DataColumn("DatabaseFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseFileName);
                this.columnDatabaseStoragePath = new global::System.Data.DataColumn("DatabaseStoragePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseStoragePath);
                this.columnBTPrinterAddress = new global::System.Data.DataColumn("BTPrinterAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBTPrinterAddress);
                this.columnBTComPort = new global::System.Data.DataColumn("BTComPort", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBTComPort);
                this.columnBaseDate = new global::System.Data.DataColumn("BaseDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseDate);
                this.columnProductsConnectionString = new global::System.Data.DataColumn("ProductsConnectionString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductsConnectionString);
                this.columnStorageMemorySize.DefaultValue = ((int)(17000));
                this.columnVibarationOn.DefaultValue = ((bool)(false));
                this.columnScanSoundNotifyOn.DefaultValue = ((bool)(false));
                this.columnDatabaseFileName.DefaultValue = ((string)("products.sdf"));
                this.columnDatabaseStoragePath.DefaultValue = ((string)("\\Program Files\\tsdfamilia"));
                this.columnBTPrinterAddress.DefaultValue = ((string)("00:00:00:00:00:01"));
                this.columnBTComPort.DefaultValue = ((int)(1));
                this.columnBaseDate.DefaultValue = ((System.DateTime)(TypedSettingsDataTable.columnBaseDate_defaultValue));
                this.columnProductsConnectionString.DefaultValue = ((string)("Data Source=|DataDirectory|\\Products.sdf"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TypedSettingsRow NewTypedSettingsRow() {
                return ((TypedSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TypedSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TypedSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TypedSettingsRowChanged != null)) {
                    this.TypedSettingsRowChanged(this, new TypedSettingsRowChangeEvent(((TypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TypedSettingsRowChanging != null)) {
                    this.TypedSettingsRowChanging(this, new TypedSettingsRowChangeEvent(((TypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TypedSettingsRowDeleted != null)) {
                    this.TypedSettingsRowDeleted(this, new TypedSettingsRowChangeEvent(((TypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TypedSettingsRowDeleting != null)) {
                    this.TypedSettingsRowDeleting(this, new TypedSettingsRowChangeEvent(((TypedSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTypedSettingsRow(TypedSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SettingsDataSet ds = new SettingsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TypedSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UntypedSettingsRow : global::System.Data.DataRow {
            
            private UntypedSettingsDataTable tableUntypedSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UntypedSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUntypedSettings = ((UntypedSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableUntypedSettings.NameColumn]));
                }
                set {
                    this[this.tableUntypedSettings.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUntypedSettings.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'UntypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUntypedSettings.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUntypedSettings.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUntypedSettings.ValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TypedSettingsRow : global::System.Data.DataRow {
            
            private TypedSettingsDataTable tableTypedSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TypedSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTypedSettings = ((TypedSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StorageMemorySize {
                get {
                    try {
                        return ((int)(this[this.tableTypedSettings.StorageMemorySizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StorageMemorySize\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.StorageMemorySizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool VibarationOn {
                get {
                    try {
                        return ((bool)(this[this.tableTypedSettings.VibarationOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VibarationOn\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.VibarationOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ScanSoundNotifyOn {
                get {
                    try {
                        return ((bool)(this[this.tableTypedSettings.ScanSoundNotifyOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScanSoundNotifyOn\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.ScanSoundNotifyOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DatabaseFileName {
                get {
                    try {
                        return ((string)(this[this.tableTypedSettings.DatabaseFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DatabaseFileName\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.DatabaseFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DatabaseStoragePath {
                get {
                    try {
                        return ((string)(this[this.tableTypedSettings.DatabaseStoragePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DatabaseStoragePath\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.DatabaseStoragePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BTPrinterAddress {
                get {
                    try {
                        return ((string)(this[this.tableTypedSettings.BTPrinterAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BTPrinterAddress\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.BTPrinterAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BTComPort {
                get {
                    try {
                        return ((int)(this[this.tableTypedSettings.BTComPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BTComPort\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.BTComPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BaseDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTypedSettings.BaseDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseDate\' in table \'TypedSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.BaseDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductsConnectionString {
                get {
                    try {
                        return ((string)(this[this.tableTypedSettings.ProductsConnectionStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductsConnectionString\' in table \'TypedSettings\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTypedSettings.ProductsConnectionStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStorageMemorySizeNull() {
                return this.IsNull(this.tableTypedSettings.StorageMemorySizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStorageMemorySizeNull() {
                this[this.tableTypedSettings.StorageMemorySizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVibarationOnNull() {
                return this.IsNull(this.tableTypedSettings.VibarationOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVibarationOnNull() {
                this[this.tableTypedSettings.VibarationOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanSoundNotifyOnNull() {
                return this.IsNull(this.tableTypedSettings.ScanSoundNotifyOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanSoundNotifyOnNull() {
                this[this.tableTypedSettings.ScanSoundNotifyOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatabaseFileNameNull() {
                return this.IsNull(this.tableTypedSettings.DatabaseFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatabaseFileNameNull() {
                this[this.tableTypedSettings.DatabaseFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatabaseStoragePathNull() {
                return this.IsNull(this.tableTypedSettings.DatabaseStoragePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatabaseStoragePathNull() {
                this[this.tableTypedSettings.DatabaseStoragePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBTPrinterAddressNull() {
                return this.IsNull(this.tableTypedSettings.BTPrinterAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBTPrinterAddressNull() {
                this[this.tableTypedSettings.BTPrinterAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBTComPortNull() {
                return this.IsNull(this.tableTypedSettings.BTComPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBTComPortNull() {
                this[this.tableTypedSettings.BTComPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseDateNull() {
                return this.IsNull(this.tableTypedSettings.BaseDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseDateNull() {
                this[this.tableTypedSettings.BaseDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductsConnectionStringNull() {
                return this.IsNull(this.tableTypedSettings.ProductsConnectionStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductsConnectionStringNull() {
                this[this.tableTypedSettings.ProductsConnectionStringColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class UntypedSettingsRowChangeEvent : global::System.EventArgs {
            
            private UntypedSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UntypedSettingsRowChangeEvent(UntypedSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UntypedSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class TypedSettingsRowChangeEvent : global::System.EventArgs {
            
            private TypedSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TypedSettingsRowChangeEvent(TypedSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TypedSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SettingsDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
